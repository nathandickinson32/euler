(ns euler.level1.problem002-spec
  (:require [speclj.core :refer :all]
            [euler.level1.problem002 :refer :all]))


;Each new term in the Fibonacci sequence is generated by adding
;the previous two terms. By starting with 1 and 2, the first terms will be:
; 1,2,3,5,8,13,21,34,55,89,...
;By considering the terms in the Fibonacci sequence whose values
;do not exceed four million, find the sum of the even-valued terms.


(describe "euler 2"

  (context "fibonacci sequence"

    (it "returns [1 2] for 2"
      (should= [1 2] (get-fibonacci-to-n 2)))

    (it "returns [1 2 3] for 3"
      (should= [1 2 3] (get-fibonacci-to-n 3)))

    (it "returns [1 2 3] for 4"
      (should= [1 2 3] (get-fibonacci-to-n 4)))

    (it "returns [1 2 3 5] for 5"
      (should= [1 2 3 5] (get-fibonacci-to-n 5)))

    (it "returns [1 2 3 5] for 6"
      (should= [1 2 3 5] (get-fibonacci-to-n 6)))

    (it "returns [1 2 3 5] for 7"
      (should= [1 2 3 5] (get-fibonacci-to-n 7)))

    (it "returns [1 2 3 5 8] for 8"
      (should= [1 2 3 5 8] (get-fibonacci-to-n 8)))

    (it "returns [1 2 3 5 8 13] for 13"
      (should= [1 2 3 5 8 13] (get-fibonacci-to-n 13))
      )
    )

  (context "find sum of evens"

    (it "returns 0 when [0]"
      (should= 0 (get-sum-of-evens [0])))
    (it "returns 2 when [0 1 2]"
      (should= 2 (get-sum-of-evens [0 1 2])))
    (it "returns 10 when [0 1 2 3 5 8]"
      (should= 10 (get-sum-of-evens [0 1 2 3 5 8])))
    )

  (context "solves euler-2"
    (it "returns 0 when range is 0"
      (should= 0 (euler-2 0)))
    (it "returns 2 when range is 2"
      (should= 2 (euler-2 2)))
    (it "returns 10 when range is 10"
      (should= 10 (euler-2 10)))
    (it "returns 44 when range is 34"
      (should= 44 (euler-2 34)))
    (it "returns when range is 4000000"
      (should= 4613732 (euler-2 4000000)))
    )
  )
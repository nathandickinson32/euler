(ns euler.level1.problem012-spec
  (:require
    [speclj.core :refer :all]
    [euler.level1.problem012 :as sut]))

;The sequence of triangle numbers is generated by adding the natural numbers.
; So the 7th triangle number would be
; 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28 The first ten terms would be:
; 1, 3, 6, 10, 15, 21, 28, 36, 45, 55,...
; Let us list the factors of the first seven triangle numbers:
; 1: 1
; 3: 1, 3
; 6: 1, 2, 3, 6
; 10: 1, 2, 5, 10
; 15: 1, 3, 5, 15
; 21: 1, 3, 7, 21
; 28: 1, 2, 4, 7, 14, 28
; We can see that 28 is the first triangle number to have over five divisors.
; What is the value of the first triangle number to have over five hundred divisors?

(describe "Euler Problem #12"

  (context "triangle-numbers"

    (it "returns 1 for 1"
      (should= 1 (sut/->triangle-number 1)))

    (it "returns 3 for 2"
      (should= 3 (sut/->triangle-number 2)))

    (it "returns 6 for 3"
      (should= 6 (sut/->triangle-number 3)))

    (it "returns 10 for 4"
      (should= 10 (sut/->triangle-number 4)))

    (it "returns 28 for 7"
      (should= 28 (sut/->triangle-number 7)))
    )

  (context "when counting divisors"

    (it "returns 1 for 1"
      (should= 1 (sut/count-divisors 1)))

    (it "returns 2 for 3"
      (should= 2 (sut/count-divisors 3)))

    (it "returns 4 for 6"
      (should= 4 (sut/count-divisors 6)))

    (it "returns 6 for 28"
      (should= 6 (sut/count-divisors 28)))
    )

  (context "solving euler 12 with a divisor count target"

    (it "returns 1 for 0"
      (should= 1 (sut/euler-12 0)))

    (it "returns 3 for 1"
      (should= 3 (sut/euler-12 1)))

    (it "returns 6 for 2"
      (should= 6 (sut/euler-12 2)))

    (it "returns 28 for 5"
      (should= 28 (sut/euler-12 5)))

    (it "Solves #12"
      (should= 76576500 (sut/euler-12 500)))
    )
  )

(run-specs)
